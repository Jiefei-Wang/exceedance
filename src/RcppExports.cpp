// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "exceedance_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// get_bit_obj
SEXP get_bit_obj(int bit_size);
RcppExport SEXP _exceedance_get_bit_obj(SEXP bit_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type bit_size(bit_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_bit_obj(bit_size));
    return rcpp_result_gen;
END_RCPP
}
// set_bit_obj
void set_bit_obj(SEXP R_ptr, IntegerVector index);
RcppExport SEXP _exceedance_set_bit_obj(SEXP R_ptrSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_ptr(R_ptrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type index(indexSEXP);
    set_bit_obj(R_ptr, index);
    return R_NilValue;
END_RCPP
}
// get_bit_count
int get_bit_count(SEXP R_ptr);
RcppExport SEXP _exceedance_get_bit_count(SEXP R_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_ptr(R_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(get_bit_count(R_ptr));
    return rcpp_result_gen;
END_RCPP
}
// print_bit
std::string print_bit(SEXP R_ptr);
RcppExport SEXP _exceedance_print_bit(SEXP R_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_ptr(R_ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(print_bit(R_ptr));
    return rcpp_result_gen;
END_RCPP
}
// get_inter_number
int get_inter_number(SEXP R_ptr1, SEXP R_ptr2);
RcppExport SEXP _exceedance_get_inter_number(SEXP R_ptr1SEXP, SEXP R_ptr2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_ptr1(R_ptr1SEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_ptr2(R_ptr2SEXP);
    rcpp_result_gen = Rcpp::wrap(get_inter_number(R_ptr1, R_ptr2));
    return rcpp_result_gen;
END_RCPP
}
// get_list_inter_number
NumericVector get_list_inter_number(List bit_list, IntegerVector list_index, SEXP bit);
RcppExport SEXP _exceedance_get_list_inter_number(SEXP bit_listSEXP, SEXP list_indexSEXP, SEXP bitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bit_list(bit_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type list_index(list_indexSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bit(bitSEXP);
    rcpp_result_gen = Rcpp::wrap(get_list_inter_number(bit_list, list_index, bit));
    return rcpp_result_gen;
END_RCPP
}
// print_bit_list
StringVector print_bit_list(List bit_list);
RcppExport SEXP _exceedance_print_bit_list(SEXP bit_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bit_list(bit_listSEXP);
    rcpp_result_gen = Rcpp::wrap(print_bit_list(bit_list));
    return rcpp_result_gen;
END_RCPP
}
// C_get_range_by_bound
SEXP C_get_range_by_bound(SEXP R_sx, SEXP R_l, SEXP R_h);
RcppExport SEXP _exceedance_C_get_range_by_bound(SEXP R_sxSEXP, SEXP R_lSEXP, SEXP R_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_sx(R_sxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_l(R_lSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_h(R_hSEXP);
    rcpp_result_gen = Rcpp::wrap(C_get_range_by_bound(R_sx, R_l, R_h));
    return rcpp_result_gen;
END_RCPP
}
// C_GW_compute_FDR
double C_GW_compute_FDR(SEXP sorted_i, SEXP R_H, SEXP R_L, int rj_num, int n);
RcppExport SEXP _exceedance_C_GW_compute_FDR(SEXP sorted_iSEXP, SEXP R_HSEXP, SEXP R_LSEXP, SEXP rj_numSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sorted_i(sorted_iSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_H(R_HSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_L(R_LSEXP);
    Rcpp::traits::input_parameter< int >::type rj_num(rj_numSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(C_GW_compute_FDR(sorted_i, R_H, R_L, rj_num, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_exceedance_get_bit_obj", (DL_FUNC) &_exceedance_get_bit_obj, 1},
    {"_exceedance_set_bit_obj", (DL_FUNC) &_exceedance_set_bit_obj, 2},
    {"_exceedance_get_bit_count", (DL_FUNC) &_exceedance_get_bit_count, 1},
    {"_exceedance_print_bit", (DL_FUNC) &_exceedance_print_bit, 1},
    {"_exceedance_get_inter_number", (DL_FUNC) &_exceedance_get_inter_number, 2},
    {"_exceedance_get_list_inter_number", (DL_FUNC) &_exceedance_get_list_inter_number, 3},
    {"_exceedance_print_bit_list", (DL_FUNC) &_exceedance_print_bit_list, 1},
    {"_exceedance_C_get_range_by_bound", (DL_FUNC) &_exceedance_C_get_range_by_bound, 3},
    {"_exceedance_C_GW_compute_FDR", (DL_FUNC) &_exceedance_C_GW_compute_FDR, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_exceedance(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
